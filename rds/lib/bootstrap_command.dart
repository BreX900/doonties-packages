import 'dart:io';

import 'package:args/args.dart';
import 'package:args/command_runner.dart';
import 'package:path/path.dart' as path_;
import 'package:rds/src/project.dart';
import 'package:rds/src/rds.dart';

class BootstrapCommand extends Command<void> {
  @override
  String get name => 'bootstrap';

  @override
  String get description => name;

  @override
  ArgParser get argParser => ArgParser.allowAnything();

  @override
  Future<void> run() async {
// final scripts = await readScripts(Directory.current) ?? const <String, String>{};
//     for (final MapEntry(key: name) in scripts.entries) {
//       final runConfigurationContent = '''
// <!-- Generated by rds -->
// <component name="ProjectRunConfigurationManager">
//   <configuration default="false" name="Rds $name" type="ShConfigurationType">
//     <option name="INDEPENDENT_SCRIPT_PATH" value="true" />
//     <option name="SCRIPT_PATH" value="\$USER_HOME\$/.pub-cache/bin/rds" />
//     <option name="SCRIPT_OPTIONS" value="run $name" />
//     <option name="INDEPENDENT_SCRIPT_WORKING_DIRECTORY" value="false" />
//     <option name="SCRIPT_WORKING_DIRECTORY" value="\$PROJECT_DIR\$" />
//     <method v="2" />
//   </configuration>
// </component>
// ''';
//       File('${runConfigurationsDirectory.path}/rds_$name.xml')
//           .writeAsStringSync(runConfigurationContent);
//     }

    await Project.find(Directory.current).asyncMap((project) async {
      await File('${project.path}/${project.name}.iml').writeAsString('''
<?xml version="1.0" encoding="UTF-8"?>
<module type="${project.hasFlutterDependency ? 'JAVA_MODULE' : 'WEB_MODULE'}" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://\$MODULE_DIR\$">
<!--      <sourceFolder url="file://\$MODULE_DIR\$" isTestSource="false" />-->
      <sourceFolder url="file://\$MODULE_DIR\$/test" isTestSource="true" />
      <excludeFolder url="file://\$MODULE_DIR\$/.dart_tool" />
      <excludeFolder url="file://\$MODULE_DIR\$/.pub" />
      <excludeFolder url="file://\$MODULE_DIR\$/build" />${project.hasFlutterDependency ? '''
\n      <excludeFolder url="file://\$MODULE_DIR\$/android/.gradle" />
      <excludeFolder url="file://\$MODULE_DIR\$/android/.idea" />
      <excludeFolder url="file://\$MODULE_DIR\$/ios/Flutter" />
      <excludeFolder url="file://\$MODULE_DIR\$/ios/Pods" />
      <excludeFolder url="file://\$MODULE_DIR\$/ios/.symlinks" />
      <excludeFolder url="file://\$MODULE_DIR\$/macos/Flutter" />
      <excludeFolder url="file://\$MODULE_DIR\$/macos/Pods" />
      <excludeFolder url="file://\$MODULE_DIR\$/macos/.symlinks" />
      <excludeFolder url="file://\$MODULE_DIR\$/.firebase" />
      ''' : ''}
    </content>
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="Dart SDK" level="project" />${project.hasFlutterDependency ? '''
\n    <orderEntry type="library" name="Flutter Plugins" level="project" />''' : ''}
    <orderEntry type="library" name="Dart Packages" level="project" />
  </component>
</module>
''');

      return project;
    }).drain();

    final rds = await Rds.find(Directory.current);

    for (final workspace in rds.workspaces) {
      await _writeWorkspace(workspace);
    }
  }

  Future<void> _writeWorkspace(Workspace workspace) async {
    final runConfigurationsDirectory = Directory('${workspace.path}/.idea');
    if (!runConfigurationsDirectory.existsSync()) {
      runConfigurationsDirectory.createSync(recursive: true);
    }

    final projects = await Stream.fromIterable(workspace.modules).asyncExpand((modulePath) {
      return Project.find(Directory(modulePath));
    }).toList();

    if (projects.every((e) => e.path != workspace.path)) {
      await File('${workspace.path}/${workspace.name}.iml').writeAsString(r'''
<?xml version="1.0" encoding="UTF-8"?>
<module type="GENERAL_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
<!--      <sourceFolder url="file://$MODULE_DIR$" isTestSource="false" />-->
    </content>
    <orderEntry type="sourceFolder" forTests="false" />
  </component>
</module>
''');
    }

    final modules = <String>[
      if (projects.every((e) => e.path != workspace.path))
        '${workspace.path}/${workspace.name}.iml',
      ...projects.map((project) {
        return path_.relative(from: workspace.path, project.modulePath);
      }),
    ].map((modulePath) {
      return '''
\n      <module fileurl="file://\$PROJECT_DIR\$/$modulePath" filepath="\$PROJECT_DIR\$/$modulePath" />''';
    }).join();

    await File('${workspace.path}/.idea/modules.xml').writeAsString('''
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>$modules
    </modules>
  </component>
</project>
''');
  }
}
